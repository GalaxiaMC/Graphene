From 0fc826ff6ea71bfbb248a30a7d116c9eb9691173 Mon Sep 17 00:00:00 2001
From: froobynooby <froobynooby@froobworld.com>
Date: Mon, 13 Apr 2020 16:11:11 +0930
Subject: [PATCH] Don't process idle hoppers

---
 .../net/minecraft/server/BlockComposter.java  |  16 +++
 src/main/java/net/minecraft/server/Chunk.java |  10 +-
 .../java/net/minecraft/server/TileEntity.java |  15 ++
 .../minecraft/server/TileEntityHopper.java    | 136 +++++++++++++++++-
 src/main/java/net/minecraft/server/World.java |   1 +
 5 files changed, 169 insertions(+), 9 deletions(-)

diff --git a/src/main/java/net/minecraft/server/BlockComposter.java b/src/main/java/net/minecraft/server/BlockComposter.java
index ccb61d656..aac5e8033 100644
--- a/src/main/java/net/minecraft/server/BlockComposter.java
+++ b/src/main/java/net/minecraft/server/BlockComposter.java
@@ -250,6 +250,14 @@ public class BlockComposter extends Block implements IInventoryHolder {
         if ((Integer) iblockdata.get(BlockComposter.a) == 7) {
             worldserver.setTypeAndData(blockposition, (IBlockData) iblockdata.a((IBlockState) BlockComposter.a), 3);
             worldserver.playSound((EntityHuman) null, blockposition, SoundEffects.BLOCK_COMPOSTER_READY, SoundCategory.BLOCKS, 1.0F, 1.0F);
+            // Nabulus start - Don't process idle hoppers
+            Chunk chunk = worldserver.getChunkIfLoaded(blockposition);
+            if (chunk != null) {
+                chunk.inventoryUpdateTickSlices[blockposition.getY()] = MinecraftServer.currentTick;
+            } else {
+                Chunk.lastUnknownInventoryUpdate = MinecraftServer.currentTick;
+            }
+            // Nabulus end
         }
 
     }
@@ -378,6 +386,14 @@ public class BlockComposter extends Block implements IInventoryHolder {
                 this.emptied = false;
             }
             // CraftBukkit end
+            // Nabulus start - Don't process idle hoppers
+            Chunk chunk = generatorAccess.getMinecraftWorld().getChunkIfLoaded(blockPosition);
+            if (chunk != null) {
+                chunk.inventoryUpdateTickSlices[blockPosition.getY()] = MinecraftServer.currentTick;
+            } else {
+                Chunk.lastUnknownInventoryUpdate = MinecraftServer.currentTick;
+            }
+            // Nabulus end
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index ae07ea2a3..aa5cd4528 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -87,10 +87,14 @@ public class Chunk implements IChunkAccess {
     }
     // Track the number of minecarts and items
     // Keep this synced with entitySlices.add() and entitySlices.remove()
-    private final int[] itemCounts = new int[16];
-    private final int[] inventoryEntityCounts = new int[16];
+    public final int[] itemCounts = new int[16]; // Nabulus - private -> public
+    public final int[] inventoryEntityCounts = new int[16]; // Nabulus - private -> public
     // Paper end
 
+    // Nabulus start - Don't process idle hoppers
+    public final int[] inventoryUpdateTickSlices = new int[256];
+    public static int lastUnknownInventoryUpdate = 0;
+    //Nabulus end
     // Tuinity start - optimise hard collision handling
     final com.destroystokyo.paper.util.maplist.EntityList[] hardCollidingEntities = new com.destroystokyo.paper.util.maplist.EntityList[16];
 
@@ -796,8 +800,10 @@ public class Chunk implements IChunkAccess {
         // Paper start
         if (entity instanceof EntityItem) {
             itemCounts[k]++;
+            world.lastItemInventorySliceMove = MinecraftServer.currentTick; // Nabulus
         } else if (entity instanceof IInventory) {
             inventoryEntityCounts[k]++;
+            world.lastItemInventorySliceMove = MinecraftServer.currentTick; // Nabulus
         }
         // Paper end
         entity.entitySlice = this.entitySlices[k]; // Paper
diff --git a/src/main/java/net/minecraft/server/TileEntity.java b/src/main/java/net/minecraft/server/TileEntity.java
index 58d958a88..6be4f3944 100644
--- a/src/main/java/net/minecraft/server/TileEntity.java
+++ b/src/main/java/net/minecraft/server/TileEntity.java
@@ -142,6 +142,16 @@ public abstract class TileEntity implements KeyedObject { // Paper
 
     public void update() {
         if (this.world != null) {
+            // Nabulus start - Don't process idle hoppers
+            if (this instanceof IInventory) {
+                Chunk chunk = getCurrentChunk();
+                if (chunk != null) {
+                    chunk.inventoryUpdateTickSlices[getPosition().getY()] = MinecraftServer.currentTick;
+                } else {
+                    Chunk.lastUnknownInventoryUpdate = MinecraftServer.currentTick;
+                }
+            }
+            // Nabulus end
             if (IGNORE_TILE_UPDATES) return; // Paper
             this.c = this.world.getType(this.position);
             this.world.b(this.position, this);
@@ -149,6 +159,11 @@ public abstract class TileEntity implements KeyedObject { // Paper
                 this.world.updateAdjacentComparators(this.position, this.c.getBlock());
             }
         }
+        // Nabulus start - Don't process idle hoppers
+        else {
+            Chunk.lastUnknownInventoryUpdate = MinecraftServer.currentTick;
+        }
+        // Nabulus end
 
     }
 
diff --git a/src/main/java/net/minecraft/server/TileEntityHopper.java b/src/main/java/net/minecraft/server/TileEntityHopper.java
index d432de40e..9fb16c981 100644
--- a/src/main/java/net/minecraft/server/TileEntityHopper.java
+++ b/src/main/java/net/minecraft/server/TileEntityHopper.java
@@ -52,6 +52,99 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
     }
     // CraftBukkit end
 
+    // Nabulus start
+    private int lastAttemptedPullTick = Integer.MIN_VALUE;
+    private int lastSuccessfulPullTick = Integer.MIN_VALUE;
+    private int lastAttemptedPushTick = Integer.MIN_VALUE;
+    private int lastSuccessfulPushTick = Integer.MIN_VALUE;
+    private int lastUpdatedTick = Integer.MIN_VALUE;
+    private int lastPassedItemInventoryCheck = Integer.MIN_VALUE;
+
+    @Override
+    public void update() {
+        super.update();
+        this.lastUpdatedTick = MinecraftServer.currentTick;
+    }
+
+    public boolean isPullIdle() {
+        return lastAttemptedPullTick != lastSuccessfulPullTick // Last attempt to pull was unsuccessful
+                && lastUpdatedTick < lastAttemptedPullTick; // The last time the inventory changed was before the last attempt to push
+    }
+
+    public boolean isPushIdle() {
+        return lastAttemptedPushTick != lastSuccessfulPushTick // Last attempt to push was unsuccessful
+                && lastUpdatedTick < lastAttemptedPushTick; // The last time the inventory changed was before the last attempt to push
+    }
+
+    public boolean attemptPullIfIdle() {
+        boolean layerAboveUpdated = getPosition().getY() < 255
+                && getCurrentChunk().inventoryUpdateTickSlices[position.getY() + 1] >= lastAttemptedPullTick
+                || Chunk.lastUnknownInventoryUpdate >= lastAttemptedPullTick;
+        if (layerAboveUpdated) {
+            return true;
+        }
+        AxisAlignedBB pullZone = new AxisAlignedBB(
+                position.getX(), position.getY(), position.getZ() + 1.0,
+                position.getX() + 1.0, position.getY() + 2.0, position.getZ() + 1.0
+        );
+
+        return itemsOrInventoriesNear(pullZone);
+    }
+
+    public boolean attemptPushIfIdle() {
+        BlockPosition pushPosition = position.shift(getBlock().get(BlockHopper.FACING));
+        Chunk pushPositionChunk = world.getChunkIfLoaded(pushPosition);
+        if (pushPositionChunk != null) {
+            boolean pushPositionLayerUpdated = pushPosition.getY() > 0
+                    && pushPositionChunk.inventoryUpdateTickSlices[pushPosition.getY()] > lastAttemptedPushTick
+                    || Chunk.lastUnknownInventoryUpdate >= lastAttemptedPushTick;
+            if (pushPositionLayerUpdated) {
+                return true;
+            }
+        }
+
+        AxisAlignedBB pushZone = new AxisAlignedBB(
+                pushPosition.getX(), pushPosition.getY(), pushPosition.getZ(),
+                pushPosition.getX() + 1.0D, pushPosition.getY() + 1.0D, pushPosition.getZ() + 1.0D
+        );
+
+        return itemsOrInventoriesNear(pushZone);
+    }
+
+    // Determines if there are items or entities with inventories near the supplied AABB
+    private boolean itemsOrInventoriesNear(AxisAlignedBB axisAlignedBB) {
+        if (lastPassedItemInventoryCheck > world.lastItemInventorySliceMove) {
+            return false;
+        }
+        int xMin = MathHelper.floor((axisAlignedBB.minX - 2.0D) / 16.0D);
+        int xMax = MathHelper.f(((axisAlignedBB.maxX) + 2.0D) / 16.0D);
+        int zMin = MathHelper.floor((axisAlignedBB.minZ - 2.0D) / 16.0D);
+        int zMax = MathHelper.f(((axisAlignedBB.maxZ) + 2.0D) / 16.0D);
+        int yMin = Math.max(0, MathHelper.floor((axisAlignedBB.minY - 2.0D) / 16.0D));
+        int yMax = Math.min(15, MathHelper.f(((axisAlignedBB.maxY) + 2.0D) / 16.0D));
+
+        boolean allChunksChecked = true;
+        for (int x = xMin; x < xMax; x++) {
+            for (int z = zMin; z < zMax; z++) {
+                Chunk chunk = world.getChunkIfLoaded(x, z);
+                if (chunk != null) {
+                    for (int y = yMin; y < yMax; y++) {
+                        if (chunk.inventoryEntityCounts[y] > 0 || chunk.itemCounts[y] > 0) {
+                            return true;
+                        }
+                    }
+                } else {
+                    allChunksChecked = false;
+                }
+            }
+        }
+        if (allChunksChecked) {
+            lastPassedItemInventoryCheck = MinecraftServer.currentTick;
+        }
+        return false;
+    }
+    // Nabulus end
+
     public TileEntityHopper() {
         super(TileEntityTypes.HOPPER);
         this.items = NonNullList.a(5, ItemStack.b);
@@ -131,7 +224,15 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
             if (!this.m() && (Boolean) this.getBlock().get(BlockHopper.ENABLED)) {
                 boolean flag = false;
 
-                if (!this.isEmpty()) {
+                // Nabulus start - Don't process idle hoppers
+                boolean attemptPush = true;
+                if (isPushIdle() && !attemptPushIfIdle()) {
+                    attemptPush = false;
+                }
+                this.lastAttemptedPushTick = MinecraftServer.currentTick;
+                //if (!this.isEmpty()) {
+                if (attemptPush && !this.isEmpty()) {
+                // Nabulus end
                     flag = this.k();
                 }
 
@@ -193,6 +294,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
                     itemstack = callPushMoveEvent(iinventory, itemstack);
                     if (itemstack == null) { // cancelled
                         origItemStack.setCount(origCount);
+                        lastSuccessfulPushTick = MinecraftServer.currentTick; // Nabulus - Counted as a successful push as plugins are unpredictable
                         return false;
                     }
                 }
@@ -206,14 +308,17 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
                     }
                     this.setItem(i, origItemStack);
                     iinventory.update();
+                    lastSuccessfulPushTick = MinecraftServer.currentTick; // Nabulus
                     return true;
                 }
                 origItemStack.setCount(origCount);
             }
         }
-        if (foundItem && world.paperConfig.cooldownHopperWhenFull) { // Inventory was full - cooldown
-            this.setCooldown(world.spigotConfig.hopperTransfer);
-        }
+        // Nabulus start - Produces unpredictable behaviour when not processing idle hoppers
+        //if (foundItem && world.paperConfig.cooldownHopperWhenFull) { // Inventory was full - cooldown
+        //    this.setCooldown(world.spigotConfig.hopperTransfer);
+        //}
+        // Nabulus end
         return false;
     }
 
@@ -228,6 +333,7 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
             itemstack = callPullMoveEvent(ihopper, iinventory, itemstack);
             if (itemstack == null) { // cancelled
                 origItemStack.setCount(origCount);
+                if (ihopper instanceof TileEntityHopper) ((TileEntityHopper) ihopper).lastSuccessfulPullTick = MinecraftServer.currentTick; // Nabulus - Counted as a successful pull as plugins cannot be predicted
                 // Drastically improve performance by returning true.
                 // No plugin could of relied on the behavior of false as the other call
                 // site for IMIE did not exhibit the same behavior
@@ -247,13 +353,16 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
             iinventory.setItem(i, origItemStack);
             IGNORE_TILE_UPDATES = false;
             iinventory.update();
+            if (ihopper instanceof TileEntityHopper) ((TileEntityHopper) ihopper).lastSuccessfulPullTick = MinecraftServer.currentTick; // Nabulus
             return true;
         }
         origItemStack.setCount(origCount);
 
-        if (world.paperConfig.cooldownHopperWhenFull) {
-            cooldownHopper(ihopper);
-        }
+        // Nabulus start - Produces unpredictable behaviour when not processing idle hoppers
+        //if (world.paperConfig.cooldownHopperWhenFull) {
+        //    cooldownHopper(ihopper);
+        //}
+        // Nabulus end
 
         return false;
     }
@@ -431,6 +540,19 @@ public class TileEntityHopper extends TileEntityLootable implements IHopper, ITi
     }
 
     public static boolean a(IHopper ihopper) {
+        // Nabulus start - Don't process idle hoppers
+        if (ihopper instanceof TileEntityHopper) {
+            boolean attemptPull = true;
+            TileEntityHopper hopper = (TileEntityHopper) ihopper;
+            if (hopper.isPullIdle() && !hopper.attemptPullIfIdle()) {
+                attemptPull = false;
+            }
+            hopper.lastAttemptedPullTick = MinecraftServer.currentTick;
+            if (!attemptPull) {
+                return false;
+            }
+        }
+        // Nabulus end
         IInventory iinventory = b(ihopper);
 
         if (iinventory != null) {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 28ee325fc..1b14b6d51 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -118,6 +118,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         return ((WorldServer)this).getChunkIfLoaded(x, z) != null;
     }
     // Paper end
+    public int lastItemInventorySliceMove; // Nabulus - Don't process idle hoppers
 
     public ResourceKey<DimensionManager> getTypeKey() {
         return typeKey;
-- 
2.29.2

