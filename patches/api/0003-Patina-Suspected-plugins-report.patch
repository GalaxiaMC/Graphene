From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ishland <ishlandmc@yeah.net>
Date: Fri, 29 Jan 2021 09:57:47 +0800
Subject: [PATCH] Suspected plugins report

Added "Suspected Plugins" to Watchdog, crash reports and exception messages

diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 05bb388407b5bd8a942478237580a38ffaa388c8..a8f2edec1f4bd7fc1d2df6c8b3e4b9644c568e3c 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -582,7 +582,11 @@ public final class SimplePluginManager implements PluginManager {
     // Paper start
     private void handlePluginException(String msg, Throwable ex, Plugin plugin) {
         gg.pufferfish.pufferfish.sentry.SentryContext.setPluginContext(plugin); // Pufferfish
-        server.getLogger().log(Level.SEVERE, msg, ex);
+        // Yatopia start - detailed report
+        server.getLogger().log(Level.SEVERE, msg);
+        com.notsatvrn.graphene.StackTraceUtils.print(ex, _msg -> server.getLogger().log(Level.SEVERE, _msg));
+        server.getLogger().log(Level.SEVERE, com.notsatvrn.graphene.StackTraceUtils.EXCEPTION_DETAILS_BELOW, ex);
+        // Yatopia end
         gg.pufferfish.pufferfish.sentry.SentryContext.removePluginContext(); // Pufferfish
         callEvent(new ServerExceptionEvent(new ServerPluginEnableDisableException(msg, ex, plugin)));
     }
@@ -645,7 +649,11 @@ public final class SimplePluginManager implements PluginManager {
                 gg.pufferfish.pufferfish.sentry.SentryContext.setEventContext(event, registration); // Pufferfish
                 // Paper start - error reporting
                 String msg = "Could not pass event " + event.getEventName() + " to " + registration.getPlugin().getDescription().getFullName();
-                server.getLogger().log(Level.SEVERE, msg, ex);
+                // Yatopia start - detailed report
+                server.getLogger().log(Level.SEVERE, msg);
+                com.notsatvrn.graphene.StackTraceUtils.print(ex, _msg -> server.getLogger().log(Level.SEVERE, _msg));
+                server.getLogger().log(Level.SEVERE, com.notsatvrn.graphene.StackTraceUtils.EXCEPTION_DETAILS_BELOW, ex);
+                // Yatopia end
                 gg.pufferfish.pufferfish.sentry.SentryContext.removeEventContext(); // Pufferfish
                 if (!(event instanceof ServerExceptionEvent)) { // We don't want to cause an endless event loop
                     callEvent(new ServerExceptionEvent(new ServerEventException(msg, ex, registration.getPlugin(), registration.getListener(), event)));
@@ -931,4 +939,10 @@ public final class SimplePluginManager implements PluginManager {
     }
     // Paper end
 
+    // Yatopia start - Accessor
+    @NotNull
+    public Collection<PluginLoader> getPluginLoaders() {
+        return new HashSet<>(fileAssociations.values());
+    }
+    // Yatopia end
 }
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index c943bd801b54519ba6cf5d45aec593d7b7438f99..a350580b006c5ab45704e2a8a09850282d8b0c93 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -112,7 +112,7 @@ public abstract class JavaPlugin extends PluginBase {
      * @return File containing this plugin
      */
     @NotNull
-    protected File getFile() {
+    public File getFile() { // Yatopia
         return file;
     }
 
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index 2b9218ddd262e89180588c3014dad328317dd8db..0c27011e6b2ff254057204084cd2f44861b4a860 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -370,7 +370,11 @@ public final class JavaPluginLoader implements PluginLoader {
                 jPlugin.setEnabled(true);
             } catch (Throwable ex) {
                 gg.pufferfish.pufferfish.sentry.SentryContext.setPluginContext(plugin); // Pufferfish
-                server.getLogger().log(Level.SEVERE, "Error occurred while enabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
+                // Yatopia start - detailed report
+                server.getLogger().log(Level.SEVERE, "Error occurred while enabling " + plugin.getDescription().getFullName() + " (Is it up to date?)");
+                com.notsatvrn.graphene.StackTraceUtils.print(ex, _msg -> server.getLogger().log(Level.SEVERE, _msg));
+                server.getLogger().log(Level.SEVERE, com.notsatvrn.graphene.StackTraceUtils.EXCEPTION_DETAILS_BELOW, ex);
+                // Yatopia end
                 gg.pufferfish.pufferfish.sentry.SentryContext.removePluginContext(); // Pufferfish
                 // Paper start - Disable plugins that fail to load
                 this.server.getPluginManager().disablePlugin(jPlugin);
@@ -401,7 +405,11 @@ public final class JavaPluginLoader implements PluginLoader {
                 jPlugin.setEnabled(false);
             } catch (Throwable ex) {
                 gg.pufferfish.pufferfish.sentry.SentryContext.setPluginContext(plugin); // Pufferfish
-                server.getLogger().log(Level.SEVERE, "Error occurred while disabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
+                // Yatopia start - detailed report
+                server.getLogger().log(Level.SEVERE, "Error occurred while disabling " + plugin.getDescription().getFullName() + " (Is it up to date?)");
+                com.notsatvrn.graphene.StackTraceUtils.print(ex, _msg -> server.getLogger().log(Level.SEVERE, _msg));
+                server.getLogger().log(Level.SEVERE, com.notsatvrn.graphene.StackTraceUtils.EXCEPTION_DETAILS_BELOW, ex);
+                // Yatopia end
                 gg.pufferfish.pufferfish.sentry.SentryContext.removePluginContext(); // Pufferfish
             }
 
@@ -418,10 +426,18 @@ public final class JavaPluginLoader implements PluginLoader {
                 try {
                     loader.close();
                 } catch (IOException ex) {
-                    //
+                    // Yatopia start - detailed report
                     this.server.getLogger().log(Level.WARNING, "Error closing the PluginClassLoader for '" + plugin.getDescription().getFullName() + "'", ex); // Paper - log exception
+                    com.notsatvrn.graphene.StackTraceUtils.print(ex, _msg -> server.getLogger().log(Level.WARNING, _msg));
+                    server.getLogger().log(Level.WARNING, com.notsatvrn.graphene.StackTraceUtils.EXCEPTION_DETAILS_BELOW, ex);
+                    // Yatopia end
                 }
             }
         }
     }
+    // Yatopia start - Accessor
+    public List<PluginClassLoader> getClassLoaders() {
+        return java.util.Collections.unmodifiableList(loaders);
+    }
+    // Yatopia end
 }
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index c67e91316f35750b18e082746206a01e783f1740..8196d100e0080f920594dbf663ccbad27be7cdf9 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -251,4 +251,13 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
                    '}';
     }
     // Paper end
+
+    // Yatopia start - Accessor
+    public java.util.Collection<Class<?>> getLoadedClasses() {
+        return java.util.Collections.unmodifiableCollection(
+                new java.util.HashSet<>(classes.values()).stream()
+                        .filter(clazz -> clazz.getClassLoader() == this).collect(java.util.stream.Collectors.toSet())
+        );
+    }
+    // Yatopia end
 }
diff --git a/src/test/java/org/bukkit/AnnotationTest.java b/src/test/java/org/bukkit/AnnotationTest.java
index 57cf9fab2501da6f1abd12e14697630ca82b0a6d..808df94e9e73e6af78d177661e47723580b7e720 100644
--- a/src/test/java/org/bukkit/AnnotationTest.java
+++ b/src/test/java/org/bukkit/AnnotationTest.java
@@ -57,8 +57,11 @@ public class AnnotationTest {
         "co/aikar/timings/TimingHistory$2$1$2",
         "co/aikar/timings/TimingHistory$3",
         "co/aikar/timings/TimingHistory$4",
-        "co/aikar/timings/TimingHistoryEntry$1"
+        "co/aikar/timings/TimingHistoryEntry$1",
         // Paper end
+        // Yatopia start
+        "com.notsatvrn.graphene/StackTraceUtils"
+        // Yatopia end
     };
 
     @Test
