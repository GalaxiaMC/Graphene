From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: etil2jz <blanchot.arthur@protonmail.ch>
Date: Tue, 19 Apr 2022 23:20:08 +0200
Subject: [PATCH] c2me: aquifer

Author: ishland <ishlandmc@yeah.net>

Original license: MIT
Original project: https://github.com/RelativityMC/C2ME-fabric (Yarn mappings)

Copyright (c) 2021-2022 ishland

diff --git a/src/main/java/net/minecraft/core/BlockPos.java b/src/main/java/net/minecraft/core/BlockPos.java
index e5a6db6bebc91458104d5ff8d5406007ab5aec49..4d82692386dbc10acf10e381712498331d285fe4 100644
--- a/src/main/java/net/minecraft/core/BlockPos.java
+++ b/src/main/java/net/minecraft/core/BlockPos.java
@@ -37,14 +37,14 @@ public class BlockPos extends Vec3i {
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final BlockPos ZERO = new BlockPos(0, 0, 0);
     // Paper start - static constants
-    private static final int PACKED_X_LENGTH = 26;
-    private static final int PACKED_Z_LENGTH = 26;
+    public static final int PACKED_X_LENGTH = 26; // Mirai - private->public
+    public static final int PACKED_Z_LENGTH = 26; // Mirai - private->public
     public static final int PACKED_Y_LENGTH = 12;
     private static final long PACKED_X_MASK = 67108863;
     private static final long PACKED_Y_MASK = 4095;
     private static final long PACKED_Z_MASK = 67108863;
-    private static final int Z_OFFSET = 12;
-    private static final int X_OFFSET = 38;
+    public static final int Z_OFFSET = 12; // Mirai - private->public
+    public static final int X_OFFSET = 38; // Mirai - private->public
     // Paper end
 
     // Purpur start
diff --git a/src/main/java/net/minecraft/world/level/levelgen/Aquifer.java b/src/main/java/net/minecraft/world/level/levelgen/Aquifer.java
index 0ae7c0446d4d64ecf189bbf3473f85f3401d7616..db86bb32c9a50448c87ad1147afcfffe720d8c4c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/Aquifer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/Aquifer.java
@@ -11,6 +11,8 @@ import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.dimension.DimensionType;
 import org.apache.commons.lang3.mutable.MutableDouble;
 
+import static net.minecraft.core.BlockPos.PACKED_X_LENGTH; // Mirai - c2me: aquifer
+
 public interface Aquifer {
     static Aquifer create(NoiseChunk chunkNoiseSampler, ChunkPos chunkPos, DensityFunction densityFunction, DensityFunction densityFunction2, DensityFunction densityFunction3, DensityFunction densityFunction4, PositionalRandomFactory randomDeriver, int minY, int height, Aquifer.FluidPicker fluidLevelSampler) {
         return new Aquifer.NoiseBasedAquifer(chunkNoiseSampler, chunkPos, densityFunction, densityFunction2, densityFunction3, densityFunction4, randomDeriver, minY, height, fluidLevelSampler);
@@ -55,6 +57,17 @@ public interface Aquifer {
     }
 
     public static class NoiseBasedAquifer implements Aquifer {
+
+        // Mirai start - c2me: aquifer
+        private static final int WATER_LEVEL_MAGIC_1 = 64 - BlockPos.X_OFFSET - PACKED_X_LENGTH;
+        private static final int WATER_LEVEL_MAGIC_2 = 64 - PACKED_X_LENGTH;
+        private static final int WATER_LEVEL_MAGIC_3 = 64 - BlockPos.PACKED_Y_LENGTH;
+        private static final int WATER_LEVEL_MAGIC_4 = 64 - BlockPos.PACKED_Y_LENGTH;
+        private static final int WATER_LEVEL_MAGIC_5 = 64 - BlockPos.Z_OFFSET - BlockPos.PACKED_Z_LENGTH;
+        private static final int WATER_LEVEL_MAGIC_6 = 64 - BlockPos.PACKED_Z_LENGTH;
+        private RandomSource randomInstance;
+        // Mirai end
+
         private static final int X_RANGE = 10;
         private static final int Y_RANGE = 9;
         private static final int Z_RANGE = 10;
@@ -104,6 +117,7 @@ public interface Aquifer {
             this.aquiferCache = new Aquifer.FluidStatus[m];
             this.aquiferLocationCache = new long[m];
             Arrays.fill(this.aquiferLocationCache, Long.MAX_VALUE);
+            this.randomInstance = com.notsatvrn.graphene.util.math.RandomUtils.getRandom(this.positionalRandomFactory); // Mirai - c2me: aquifer
         }
 
         private int getIndex(int x, int y, int z) {
@@ -113,24 +127,29 @@ public interface Aquifer {
             return (j * this.gridSizeZ + k) * this.gridSizeX + i;
         }
 
+        // Mirai start - c2me: aquifer
+        /**
+         * @author ishland
+         * @reason optimize
+         */
         @Nullable
         @Override
         public BlockState computeSubstance(DensityFunction.FunctionContext functionContext, double d) {
-            int i = functionContext.blockX();
-            int j = functionContext.blockY();
-            int k = functionContext.blockZ();
-            if (d > 0.0D) {
+            final int blockX = functionContext.blockX();
+            final int blockY = functionContext.blockY();
+            final int blockZ = functionContext.blockZ();
+            if (d > 0.0) {
                 this.shouldScheduleFluidUpdate = false;
                 return null;
             } else {
-                Aquifer.FluidStatus fluidStatus = this.globalFluidPicker.computeFluid(i, j, k);
-                if (fluidStatus.at(j).is(Blocks.LAVA)) {
+                Aquifer.FluidStatus fluidLevel = this.globalFluidPicker.computeFluid(blockX, blockY, blockZ);
+                if (fluidLevel.at(blockY).is(Blocks.LAVA)) {
                     this.shouldScheduleFluidUpdate = false;
                     return Blocks.LAVA.defaultBlockState();
                 } else {
-                    int l = Math.floorDiv(i - 5, 16);
-                    int m = Math.floorDiv(j + 1, 12);
-                    int n = Math.floorDiv(k - 5, 16);
+                    int l = Math.floorDiv(blockX - 5, 16);
+                    int m = Math.floorDiv(blockY + 1, 12);
+                    int n = Math.floorDiv(blockZ - 5, 16);
                     int o = Integer.MAX_VALUE;
                     int p = Integer.MAX_VALUE;
                     int q = Integer.MAX_VALUE;
@@ -138,90 +157,212 @@ public interface Aquifer {
                     long s = 0L;
                     long t = 0L;
 
-                    for(int u = 0; u <= 1; ++u) {
-                        for(int v = -1; v <= 1; ++v) {
-                            for(int w = 0; w <= 1; ++w) {
+                    for (int u = 0; u <= 1; ++u) {
+                        for (int v = -1; v <= 1; ++v) {
+                            for (int w = 0; w <= 1; ++w) {
                                 int x = l + u;
                                 int y = m + v;
                                 int z = n + w;
-                                int aa = this.getIndex(x, y, z);
+                                int aa = ((y - this.minGridY) * this.gridSizeZ + z - this.minGridZ) * this.gridSizeX + x - this.minGridX;
                                 long ab = this.aquiferLocationCache[aa];
                                 long ac;
                                 if (ab != Long.MAX_VALUE) {
                                     ac = ab;
                                 } else {
-                                    RandomSource randomSource = this.positionalRandomFactory.at(x, y, z);
-                                    ac = BlockPos.asLong(x * 16 + randomSource.nextInt(10), y * 12 + randomSource.nextInt(9), z * 16 + randomSource.nextInt(10));
+                                    // C2ME - reuse random instance
+                                    com.notsatvrn.graphene.util.math.RandomUtils.derive(this.positionalRandomFactory, this.randomInstance, x, y, z);
+                                    final int i1 = randomInstance.nextInt(10);
+                                    final int i2 = randomInstance.nextInt(9);
+                                    final int i3 = randomInstance.nextInt(10);
+                                    ac = BlockPos.asLong(x * 16 + i1, y * 12 + i2, z * 16 + i3);
                                     this.aquiferLocationCache[aa] = ac;
                                 }
 
-                                int ae = BlockPos.getX(ac) - i;
-                                int af = BlockPos.getY(ac) - j;
-                                int ag = BlockPos.getZ(ac) - k;
-                                int ah = ae * ae + af * af + ag * ag;
-                                if (o >= ah) {
+                                int ad = (int) ((ac << WATER_LEVEL_MAGIC_1) >> WATER_LEVEL_MAGIC_2) - blockX; // C2ME - inline
+                                int ae = (int) ((ac << WATER_LEVEL_MAGIC_3) >> WATER_LEVEL_MAGIC_4) - blockY; // C2ME - inline
+                                int af = (int) ((ac << WATER_LEVEL_MAGIC_5) >> WATER_LEVEL_MAGIC_6) - blockZ; // C2ME - inline
+                                int ag = ad * ad + ae * ae + af * af;
+                                if (o >= ag) {
                                     t = s;
                                     s = r;
                                     r = ac;
                                     q = p;
                                     p = o;
-                                    o = ah;
-                                } else if (p >= ah) {
+                                    o = ag;
+                                } else if (p >= ag) {
                                     t = s;
                                     s = ac;
                                     q = p;
-                                    p = ah;
-                                } else if (q >= ah) {
+                                    p = ag;
+                                } else if (q >= ag) {
                                     t = ac;
-                                    q = ah;
+                                    q = ag;
                                 }
                             }
                         }
                     }
 
-                    Aquifer.FluidStatus fluidStatus2 = this.getAquiferStatus(r);
-                    double e = similarity(o, p);
-                    BlockState blockState = fluidStatus2.at(j);
-                    if (e <= 0.0D) {
+                    Aquifer.FluidStatus fluidLevel2 = this.getAquiferStatus(r);
+                    double e = 1.0 - Math.abs(p - o) / 25.0; // C2ME - inline
+                    final BlockState fluidLevel2BlockState = fluidLevel2.at(blockY);
+                    if (e <= 0.0) {
                         this.shouldScheduleFluidUpdate = e >= FLOWING_UPDATE_SIMULARITY;
-                        return blockState;
-                    } else if (blockState.is(Blocks.WATER) && this.globalFluidPicker.computeFluid(i, j - 1, k).at(j - 1).is(Blocks.LAVA)) {
-                        this.shouldScheduleFluidUpdate = true;
-                        return blockState;
+                        return fluidLevel2BlockState;
                     } else {
-                        MutableDouble mutableDouble = new MutableDouble(Double.NaN);
-                        Aquifer.FluidStatus fluidStatus3 = this.getAquiferStatus(s);
-                        double f = e * this.calculatePressure(functionContext, mutableDouble, fluidStatus2, fluidStatus3);
-                        if (d + f > 0.0D) {
-                            this.shouldScheduleFluidUpdate = false;
-                            return null;
+                        final boolean fluidLevel2BlockStateOfWater = fluidLevel2BlockState.is(Blocks.WATER);
+                        if (fluidLevel2BlockStateOfWater && this.globalFluidPicker.computeFluid(blockX, blockY - 1, blockZ).at(blockY - 1).is(Blocks.LAVA)) {
+                            this.shouldScheduleFluidUpdate = true;
+                            return fluidLevel2BlockState;
                         } else {
-                            Aquifer.FluidStatus fluidStatus4 = this.getAquiferStatus(t);
-                            double g = similarity(o, q);
-                            if (g > 0.0D) {
-                                double h = e * g * this.calculatePressure(functionContext, mutableDouble, fluidStatus2, fluidStatus4);
-                                if (d + h > 0.0D) {
-                                    this.shouldScheduleFluidUpdate = false;
-                                    return null;
+                            double mutableDouble = Double.NaN;
+                            Aquifer.FluidStatus fluidLevel3 = this.getAquiferStatus(s);
+                            double result1;
+                            final BlockState fluidLevel3BlockState = fluidLevel3.at(blockY);
+                            final boolean fluidLevel2BlockStateOfLava = fluidLevel2BlockState.is(Blocks.LAVA);
+                            final boolean fluidLevel3BlockStateOfLava = fluidLevel3BlockState.is(Blocks.LAVA);
+                            final boolean fluidLevel3BlockStateOfWater = fluidLevel3BlockState.is(Blocks.WATER);
+                            if ((!fluidLevel2BlockStateOfLava || !fluidLevel3BlockStateOfWater) && (!fluidLevel2BlockStateOfWater || !fluidLevel3BlockStateOfLava)) {
+                                int j2 = Math.abs(fluidLevel2.fluidLevel - fluidLevel3.fluidLevel);
+                                if (j2 == 0) {
+                                    result1 = 0.0;
+                                } else {
+                                    double d2 = 0.5 * (fluidLevel2.fluidLevel + fluidLevel3.fluidLevel);
+                                    double e2 = blockY + 0.5 - d2;
+                                    double f2 = j2 / 2.0;
+                                    double o2 = f2 - Math.abs(e2);
+                                    double q2;
+                                    if (e2 > 0.0) {
+                                        double p2 = 0.0 + o2;
+                                        q2 = p2 > 0.0 ? p2 / 1.5 : p2 / 2.5;
+                                    } else {
+                                        double p2 = 3.0 + o2;
+                                        q2 = p2 > 0.0 ? p2 / 3.0 : p2 / 10.0;
+                                    }
+
+                                    double r2;
+                                    if (!(q2 < -2.0) && !(q2 > 2.0)) {
+                                        double t2 = this.barrierNoise.compute(functionContext);
+                                        mutableDouble = t2;
+                                        r2 = t2;
+                                    } else {
+                                        r2 = 0.0;
+                                    }
+
+                                    result1 = 2.0 * (r2 + q2);
                                 }
+                            } else {
+                                result1 = 2.0;
                             }
-
-                            double ai = similarity(p, q);
-                            if (ai > 0.0D) {
-                                double aj = e * ai * this.calculatePressure(functionContext, mutableDouble, fluidStatus3, fluidStatus4);
-                                if (d + aj > 0.0D) {
-                                    this.shouldScheduleFluidUpdate = false;
-                                    return null;
+                            double f = e * result1;
+                            if (d + f > 0.0) {
+                                this.shouldScheduleFluidUpdate = false;
+                                return null;
+                            } else {
+                                Aquifer.FluidStatus fluidLevel4 = this.getAquiferStatus(t);
+                                double g = 1.0 - (double) Math.abs(q - o) / 25.0;
+                                final BlockState fluidLevel4BlockState = fluidLevel4.at(blockY);
+                                final boolean fluidLevel4BlockStateOfWater = fluidLevel4BlockState.is(Blocks.WATER);
+                                final boolean fluidLevel4BlockStateOfLava = fluidLevel4BlockState.is(Blocks.LAVA);
+                                if (g > 0.0) {
+                                    double result;
+                                    if ((!fluidLevel2BlockStateOfLava || !fluidLevel4BlockStateOfWater) && (!fluidLevel2BlockStateOfWater || !fluidLevel4BlockStateOfLava)) {
+                                        int j1 = Math.abs(fluidLevel2.fluidLevel - fluidLevel4.fluidLevel);
+                                        if (j1 == 0) {
+                                            result = 0.0;
+                                        } else {
+                                            double d1 = 0.5 * (fluidLevel2.fluidLevel + fluidLevel4.fluidLevel);
+                                            double e1 = blockY + 0.5 - d1;
+                                            double f1 = j1 / 2.0;
+                                            double o1 = f1 - Math.abs(e1);
+                                            double q1;
+                                            if (e1 > 0.0) {
+                                                double p1 = 0.0 + o1;
+                                                q1 = p1 > 0.0 ? p1 / 1.5 : p1 / 2.5;
+                                            } else {
+                                                double p1 = 3.0 + o1;
+                                                q1 = p1 > 0.0 ? p1 / 3.0 : p1 / 10.0;
+                                            }
+
+                                            double r1;
+                                            if (!(q1 < -2.0) && !(q1 > 2.0)) {
+                                                if (Double.isNaN(mutableDouble)) {
+                                                    double t1 = this.barrierNoise.compute(functionContext);
+                                                    mutableDouble = t1;
+                                                    r1 = t1;
+                                                } else {
+                                                    r1 = mutableDouble;
+                                                }
+                                            } else {
+                                                r1 = 0.0;
+                                            }
+
+                                            result = 2.0 * (r1 + q1);
+                                        }
+                                    } else {
+                                        result = 2.0;
+                                    }
+                                    double h = e * g * result;
+                                    if (d + h > 0.0) {
+                                        this.shouldScheduleFluidUpdate = false;
+                                        return null;
+                                    }
+                                }
+
+                                double h = 1.0 - (double) Math.abs(q - p) / 25.0;
+                                if (h > 0.0) {
+                                    double result;
+                                    if ((!fluidLevel3BlockStateOfLava || !fluidLevel4BlockStateOfWater) && (!fluidLevel3BlockStateOfWater || !fluidLevel4BlockStateOfLava)) {
+                                        int j1 = Math.abs(fluidLevel3.fluidLevel - fluidLevel4.fluidLevel);
+                                        if (j1 == 0) {
+                                            result = 0.0;
+                                        } else {
+                                            double d1 = 0.5 * (fluidLevel3.fluidLevel + fluidLevel4.fluidLevel);
+                                            double e1 = blockY + 0.5 - d1;
+                                            double f1 = j1 / 2.0;
+                                            double o1 = f1 - Math.abs(e1);
+                                            double q1;
+                                            if (e1 > 0.0) {
+                                                double p1 = 0.0 + o1;
+                                                q1 = p1 > 0.0 ? p1 / 1.5 : p1 / 2.5;
+                                            } else {
+                                                double p1 = 3.0 + o1;
+                                                q1 = p1 > 0.0 ? p1 / 3.0 : p1 / 10.0;
+                                            }
+
+                                            double r1;
+                                            if (!(q1 < -2.0) && !(q1 > 2.0)) {
+                                                if (Double.isNaN(mutableDouble)) {
+                                                    double t1 = this.barrierNoise.compute(functionContext);
+                                                    mutableDouble = t1;
+                                                    r1 = t1;
+                                                } else {
+                                                    r1 = mutableDouble;
+                                                }
+                                            } else {
+                                                r1 = 0.0;
+                                            }
+
+                                            result = 2.0 * (r1 + q1);
+                                        }
+                                    } else {
+                                        result = 2.0;
+                                    }
+                                    double ah = e * h * result;
+                                    if (d + ah > 0.0) {
+                                        this.shouldScheduleFluidUpdate = false;
+                                        return null;
+                                    }
                                 }
-                            }
 
-                            this.shouldScheduleFluidUpdate = true;
-                            return blockState;
+                                this.shouldScheduleFluidUpdate = true;
+                                return fluidLevel2BlockState;
+                            }
                         }
                     }
                 }
             }
         }
+        // Mirai end
 
         @Override
         public boolean shouldScheduleFluidUpdate() {
@@ -303,51 +444,56 @@ public interface Aquifer {
             return Math.floorDiv(z, 16);
         }
 
+        // Mirai start - c2me: aquifer
+        /**
+         * @author ishland
+         * @reason optimize
+         */
         private Aquifer.FluidStatus getAquiferStatus(long pos) {
-            int i = BlockPos.getX(pos);
-            int j = BlockPos.getY(pos);
-            int k = BlockPos.getZ(pos);
-            int l = this.gridX(i);
-            int m = this.gridY(j);
-            int n = this.gridZ(k);
-            int o = this.getIndex(l, m, n);
-            Aquifer.FluidStatus fluidStatus = this.aquiferCache[o];
-            if (fluidStatus != null) {
-                return fluidStatus;
+            int i = (int) ((pos << WATER_LEVEL_MAGIC_1) >> WATER_LEVEL_MAGIC_2); // C2ME - inline
+            int j = (int) ((pos << WATER_LEVEL_MAGIC_3) >> WATER_LEVEL_MAGIC_4); // C2ME - inline
+            int k = (int) ((pos << WATER_LEVEL_MAGIC_5) >> WATER_LEVEL_MAGIC_6); // C2ME - inline
+            int l = Math.floorDiv(i, 16); // C2ME - inline
+            int m = Math.floorDiv(j, 12); // C2ME - inline
+            int n = Math.floorDiv(k, 16); // C2ME - inline
+            int o = ((m - this.minGridY) * this.gridSizeZ + n - this.minGridZ) * this.gridSizeX + l - this.minGridX;
+            Aquifer.FluidStatus fluidLevel = this.aquiferCache[o];
+            if (fluidLevel != null) {
+                return fluidLevel;
             } else {
-                Aquifer.FluidStatus fluidStatus2 = this.computeFluid(i, j, k);
-                this.aquiferCache[o] = fluidStatus2;
-                return fluidStatus2;
+                Aquifer.FluidStatus fluidLevel2 = this.computeFluid(i, j, k);
+                this.aquiferCache[o] = fluidLevel2;
+                return fluidLevel2;
             }
         }
 
         private Aquifer.FluidStatus computeFluid(int i, int j, int k) {
-            Aquifer.FluidStatus fluidStatus = this.globalFluidPicker.computeFluid(i, j, k);
+            Aquifer.FluidStatus fluidLevel = this.globalFluidPicker.computeFluid(i, j, k);
             int l = Integer.MAX_VALUE;
             int m = j + 12;
             int n = j - 12;
             boolean bl = false;
 
-            for(int[] is : SURFACE_SAMPLING_OFFSETS_IN_CHUNKS) {
-                int o = i + SectionPos.sectionToBlockCoord(is[0]);
-                int p = k + SectionPos.sectionToBlockCoord(is[1]);
+            for (int[] is : SURFACE_SAMPLING_OFFSETS_IN_CHUNKS) {
+                int o = i + (is[0] << 4); // C2ME - inline
+                int p = k + (is[1] << 4); // C2ME - inline
                 int q = this.noiseChunk.preliminarySurfaceLevel(o, p);
                 int r = q + 8;
                 boolean bl2 = is[0] == 0 && is[1] == 0;
                 if (bl2 && n > r) {
-                    return fluidStatus;
+                    return fluidLevel;
                 }
 
                 boolean bl3 = m > r;
-                if (bl3 || bl2) {
-                    Aquifer.FluidStatus fluidStatus2 = this.globalFluidPicker.computeFluid(o, r, p);
-                    if (!fluidStatus2.at(r).isAir()) {
+                if (bl2 || bl3) {
+                    Aquifer.FluidStatus fluidLevel2 = this.globalFluidPicker.computeFluid(o, r, p);
+                    if (!fluidLevel2.at(r).isAir()) {
                         if (bl2) {
                             bl = true;
                         }
 
                         if (bl3) {
-                            return fluidStatus2;
+                            return fluidLevel2;
                         }
                     }
                 }
@@ -356,43 +502,51 @@ public interface Aquifer {
             }
 
             int s = l + 8 - j;
-            int t = 64;
-            double d = bl ? Mth.clampedMap((double)s, 0.0D, 64.0D, 1.0D, 0.0D) : 0.0D;
-            double e = Mth.clamp(this.fluidLevelFloodednessNoise.compute(new DensityFunction.SinglePointContext(i, j, k)), -1.0D, 1.0D);
-            double f = Mth.map(d, 1.0D, 0.0D, -0.3D, 0.8D);
+            double d = bl ? clampedLerpFromProgressInlined(s) : 0.0;
+            double e = Mth.clamp(this.fluidLevelFloodednessNoise.compute(new DensityFunction.SinglePointContext(i, j, k)), -1.0, 1.0);
+            double f = lerpFromProgressInlined(d, -0.3, 0.8);
             if (e > f) {
-                return fluidStatus;
+                return fluidLevel;
             } else {
-                double g = Mth.map(d, 1.0D, 0.0D, -0.8D, 0.4D);
+                double g = lerpFromProgressInlined(d, -0.8, 0.4);
                 if (e <= g) {
-                    return new Aquifer.FluidStatus(DimensionType.WAY_BELOW_MIN_Y, fluidStatus.fluidType);
+                    return new Aquifer.FluidStatus(DimensionType.WAY_BELOW_MIN_Y, fluidLevel.fluidType);
                 } else {
-                    int u = 16;
-                    int v = 40;
                     int w = Math.floorDiv(i, 16);
                     int x = Math.floorDiv(j, 40);
                     int y = Math.floorDiv(k, 16);
                     int z = x * 40 + 20;
-                    int aa = 10;
-                    double h = this.fluidLevelSpreadNoise.compute(new DensityFunction.SinglePointContext(w, x, y)) * 10.0D;
+                    double h = this.fluidLevelSpreadNoise.compute(new DensityFunction.SinglePointContext(w, x, y)) * 10.0;
                     int ab = Mth.quantize(h, 3);
                     int ac = z + ab;
                     int ad = Math.min(l, ac);
                     if (ac <= -10) {
-                        int ae = 64;
-                        int af = 40;
                         int ag = Math.floorDiv(i, 64);
                         int ah = Math.floorDiv(j, 40);
                         int ai = Math.floorDiv(k, 64);
                         double aj = this.lavaNoise.compute(new DensityFunction.SinglePointContext(ag, ah, ai));
-                        if (Math.abs(aj) > 0.3D) {
+                        if (Math.abs(aj) > 0.3) {
                             return new Aquifer.FluidStatus(ad, Blocks.LAVA.defaultBlockState());
                         }
                     }
 
-                    return new Aquifer.FluidStatus(ad, fluidStatus.fluidType);
+                    return new Aquifer.FluidStatus(ad, fluidLevel.fluidType);
                 }
             }
         }
+
+        private static double clampedLerpFromProgressInlined(double lerpValue) {
+            final double delta = lerpValue / 64.0;
+            if (delta < 0.0) {
+                return 1.0;
+            } else {
+                return delta > 1.0 ? 0.0 : 1.0 - delta;
+            }
+        }
+
+        private static double lerpFromProgressInlined(double lerpValue, double start, double end) {
+            return start - (lerpValue - 1.0) * (end - start);
+        }
+        // Mirai end
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/LegacyRandomSource.java b/src/main/java/net/minecraft/world/level/levelgen/LegacyRandomSource.java
index 97c806aba9991a8663ed7b05c108c87f2b167853..2b65db81d39a406e080a7b956058f008d9dee4b3 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/LegacyRandomSource.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/LegacyRandomSource.java
@@ -77,5 +77,11 @@ public class LegacyRandomSource implements BitRandomSource {
         public void parityConfigString(StringBuilder info) {
             info.append("LegacyPositionalRandomFactory{").append(this.seed).append("}");
         }
+
+        // Mirai start - c2me: aquifer
+        public long getSeed() {
+            return seed;
+        }
+        // Mirai end
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/SingleThreadedRandomSource.java b/src/main/java/net/minecraft/world/level/levelgen/SingleThreadedRandomSource.java
index b2989c09928b74b93b1c356c4e9a77887fc589ad..2990e3bc266bcd814cfe0ea8eb865798e25aa169 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/SingleThreadedRandomSource.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/SingleThreadedRandomSource.java
@@ -39,4 +39,10 @@ public class SingleThreadedRandomSource implements BitRandomSource {
     public double nextGaussian() {
         return this.gaussianSource.nextGaussian();
     }
+
+    // Mirai start - c2me: aquifer
+    public long getSeed() {
+        return seed;
+    }
+    // Mirai end
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/Xoroshiro128PlusPlus.java b/src/main/java/net/minecraft/world/level/levelgen/Xoroshiro128PlusPlus.java
index e96ac26b6788de1c372152c2a9e3ba11b1b2e132..ccc40303a46f0df98bde29e4453ac1d0d4d447e3 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/Xoroshiro128PlusPlus.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/Xoroshiro128PlusPlus.java
@@ -27,4 +27,22 @@ public class Xoroshiro128PlusPlus {
         this.seedHi = Long.rotateLeft(m, 28);
         return n;
     }
+
+    // Mirai start - c2me: aquifer
+    public long getSeedLo() {
+        return seedLo;
+    }
+
+    public long getSeedHi() {
+        return seedHi;
+    }
+
+    public void setSeedLo(long seedLo) {
+        this.seedLo = seedLo;
+    }
+
+    public void setSeedHi(long seedHi) {
+        this.seedHi = seedHi;
+    }
+    // Mirai end
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/XoroshiroRandomSource.java b/src/main/java/net/minecraft/world/level/levelgen/XoroshiroRandomSource.java
index b1b007adc22cdef8868202fa2e7265b50e74ab59..8fbe4f80fc4b6449019bf03bfaaa5c2e09ed9129 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/XoroshiroRandomSource.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/XoroshiroRandomSource.java
@@ -99,6 +99,12 @@ public class XoroshiroRandomSource implements RandomSource {
         return this.randomNumberGenerator.nextLong() >>> 64 - bits;
     }
 
+    // Mirai start - c2me: aquifer
+    public Xoroshiro128PlusPlus getRandomNumberGenerator() {
+        return randomNumberGenerator;
+    }
+    // Mirai end
+
     public static class XoroshiroPositionalRandomFactory implements PositionalRandomFactory {
         private static final HashFunction MD5_128 = Hashing.md5();
         private final long seedLo;
@@ -129,5 +135,15 @@ public class XoroshiroRandomSource implements RandomSource {
         public void parityConfigString(StringBuilder info) {
             info.append("seedLo: ").append(this.seedLo).append(", seedHi: ").append(this.seedHi);
         }
+
+        // Mirai start - c2me: aquifer
+        public long getSeedLo() {
+            return seedLo;
+        }
+
+        public long getSeedHi() {
+            return seedHi;
+        }
+        // Mirai end
     }
 }
