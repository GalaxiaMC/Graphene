From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: notsatvrn <satvrn@gmx.com>
Date: Sat, 17 Feb 2024 20:03:26 -0800
Subject: [PATCH] Lithium: gen


diff --git a/src/main/java/net/minecraft/server/level/WorldGenRegion.java b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
index aee4ab6c7ea09006bec4a1c6df0005718c6d86bd..3ce4b065daeae6a13bbe131e8e502b601496e4f7 100644
--- a/src/main/java/net/minecraft/server/level/WorldGenRegion.java
+++ b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
@@ -59,7 +59,7 @@ import org.slf4j.Logger;
 public class WorldGenRegion implements WorldGenLevel {
 
     private static final Logger LOGGER = LogUtils.getLogger();
-    private final List<ChunkAccess> cache;
+    private final ChunkAccess[] cache; // Lithium - gen
     private final ChunkAccess center;
     private final int size;
     private final ServerLevel level;
@@ -92,7 +92,7 @@ public class WorldGenRegion implements WorldGenLevel {
         if (j * j != chunks.size()) {
             throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("Cache size is not a square."));
         } else {
-            this.cache = chunks;
+            this.cache = chunks.toArray(me.jellysquid.mods.lithium.util.Constants.CHUNKACCESS_EMPTY); // Lithium - gen
             this.center = (ChunkAccess) chunks.get(chunks.size() / 2);
             this.size = j;
             this.level = world;
@@ -143,7 +143,17 @@ public class WorldGenRegion implements WorldGenLevel {
 
     @Override
     public ChunkAccess getChunk(int chunkX, int chunkZ) {
-        return this.getChunk(chunkX, chunkZ, ChunkStatus.EMPTY);
+        // Lithium start - gen
+        //return this.getChunk(chunkX, chunkZ, ChunkStatus.EMPTY);
+        int x = chunkX - this.firstPos.x;
+        int z = chunkZ - this.firstPos.z;
+
+        if (x >= 0 && z >= 0 && x < this.size && z < this.size) {
+            return this.cache[x + z * this.size];
+        } else {
+            throw (RuntimeException) Util.pauseInIde(new RuntimeException(String.format(Locale.ROOT, "We are asking a region for a chunk out of bound | %s %s", chunkX, chunkZ)));
+        }
+        // Lithium end
     }
 
     @Nullable
@@ -151,6 +161,8 @@ public class WorldGenRegion implements WorldGenLevel {
     public ChunkAccess getChunk(int chunkX, int chunkZ, ChunkStatus leastStatus, boolean create) {
         ChunkAccess ichunkaccess;
 
+        // Lithium start - gen
+        /*
         if (this.hasChunk(chunkX, chunkZ)) {
             int k = chunkX - this.firstPos.x;
             int l = chunkZ - this.firstPos.z;
@@ -162,6 +174,16 @@ public class WorldGenRegion implements WorldGenLevel {
         } else {
             ichunkaccess = null;
         }
+        */
+        int x = chunkX - this.firstPos.x;
+        int z = chunkZ - this.firstPos.z;
+
+        if (x >= 0 && z >= 0 && x < this.size && z < this.size) {
+            ichunkaccess = this.cache[x + z * this.size];
+        } else {
+            ichunkaccess = null;
+        }
+        // Lithium end
 
         if (!create) {
             return null;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
index 98c7f695093acbcf9382a5f07a7a89e373709763..161e4677a219f8e02dfe2ff79c98239b550c1105 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -61,11 +61,13 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
     });
     private static final BlockState AIR = Blocks.AIR.defaultBlockState();
     public final Holder<NoiseGeneratorSettings> settings;
+    private final int cachedSeaLevel; // Lithium - gen
     private final Supplier<Aquifer.FluidPicker> globalFluidPicker;
 
     public NoiseBasedChunkGenerator(BiomeSource biomeSource, Holder<NoiseGeneratorSettings> settings) {
         super(biomeSource);
         this.settings = settings;
+        this.cachedSeaLevel = ((NoiseGeneratorSettings) settings.value()).seaLevel(); // Lithium - gen
         this.globalFluidPicker = Suppliers.memoize(() -> {
             return NoiseBasedChunkGenerator.createFluidPicker((NoiseGeneratorSettings) settings.value());
         });
@@ -394,7 +396,8 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
 
     @Override
     public int getSeaLevel() {
-        return ((NoiseGeneratorSettings) this.settings.value()).seaLevel();
+        //return ((NoiseGeneratorSettings) this.settings.value()).seaLevel();
+        return this.cachedSeaLevel; // Lithium - gen
     }
 
     @Override
