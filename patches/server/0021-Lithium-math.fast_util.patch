From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: satvrn <pastawho@gmail.com>
Date: Tue, 26 Sep 2023 13:46:25 -0700
Subject: [PATCH] Lithium: math.fast_util


diff --git a/src/main/java/net/minecraft/core/AxisCycle.java b/src/main/java/net/minecraft/core/AxisCycle.java
index b5d8a60dc78a76c0a55bfc30cc49d26857bd914a..869bc08558cdafb3af57039c81b4720befca74f7 100644
--- a/src/main/java/net/minecraft/core/AxisCycle.java
+++ b/src/main/java/net/minecraft/core/AxisCycle.java
@@ -35,7 +35,19 @@ public enum AxisCycle {
 
         @Override
         public Direction.Axis cycle(Direction.Axis axis) {
-            return AXIS_VALUES[Math.floorMod(axis.ordinal() + 1, 3)];
+            //return AXIS_VALUES[Math.floorMod(axis.ordinal() + 1, 3)]; // Lithium - math.fast_util
+            // Lithium start - math.fast_util
+            switch (axis.ordinal()) {
+                case 0: //X
+                    return Direction.Axis.Y;
+                case 1: //Y
+                    return Direction.Axis.Z;
+                case 2: //Z
+                    return Direction.Axis.X;
+            }
+
+            throw new IllegalArgumentException();
+            // Lithium end
         }
 
         @Override
@@ -56,7 +68,19 @@ public enum AxisCycle {
 
         @Override
         public Direction.Axis cycle(Direction.Axis axis) {
-            return AXIS_VALUES[Math.floorMod(axis.ordinal() - 1, 3)];
+            //return AXIS_VALUES[Math.floorMod(axis.ordinal() - 1, 3)]; // Lithium - math.fast_util
+            // Lithium start - math.fast_util
+            switch (axis.ordinal()) {
+                case 0: //X
+                    return Direction.Axis.Z;
+                case 1: //Y
+                    return Direction.Axis.X;
+                case 2: //Z
+                    return Direction.Axis.Y;
+            }
+
+            throw new IllegalArgumentException();
+            // Lithium end
         }
 
         @Override
@@ -65,6 +89,15 @@ public enum AxisCycle {
         }
     };
 
+    // Lithium start - math.fast_util
+    static {
+        assert Direction.Axis.X.ordinal() == 0;
+        assert Direction.Axis.Y.ordinal() == 1;
+        assert Direction.Axis.Z.ordinal() == 2;
+        assert Direction.Axis.values().length == 3;
+    }
+    // Lithium end
+
     public static final Direction.Axis[] AXIS_VALUES = Direction.Axis.values();
     public static final AxisCycle[] VALUES = values();
 
diff --git a/src/main/java/net/minecraft/core/Direction.java b/src/main/java/net/minecraft/core/Direction.java
index b805e57d5a67d77d226cd8154e970050e2e8ef4a..4c2018ef24f4bbd3eb25f526d30ac997cabca5dd 100644
--- a/src/main/java/net/minecraft/core/Direction.java
+++ b/src/main/java/net/minecraft/core/Direction.java
@@ -197,7 +197,7 @@ public enum Direction implements StringRepresentable {
     }
 
     public Direction getOpposite() {
-        return from3DDataValue(this.oppositeIndex);
+        return BY_3D_DATA[this.oppositeIndex]; // Lithium - math.fast_util
     }
 
     public Direction getClockWise(Direction.Axis axis) {
@@ -478,7 +478,7 @@ public enum Direction implements StringRepresentable {
     }
 
     public static Direction getRandom(RandomSource random) {
-        return Util.getRandom(VALUES, random);
+        return BY_3D_DATA[random.nextInt(BY_3D_DATA.length)]; // Lithium - math.fast_util
     }
 
     public static Direction getNearest(double x, double y, double z) {
diff --git a/src/main/java/net/minecraft/world/phys/AABB.java b/src/main/java/net/minecraft/world/phys/AABB.java
index 5c70aa2ce1a9e89c8c271201b6755ea1325058ac..ba50f2fc48b33d4e242d64f06455db78ce498778 100644
--- a/src/main/java/net/minecraft/world/phys/AABB.java
+++ b/src/main/java/net/minecraft/world/phys/AABB.java
@@ -8,6 +8,15 @@ import net.minecraft.util.Mth;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
 
 public class AABB {
+    // Lithium start - math.fast_util
+    static {
+        assert Direction.Axis.X.ordinal() == 0;
+        assert Direction.Axis.Y.ordinal() == 1;
+        assert Direction.Axis.Z.ordinal() == 2;
+        assert Direction.Axis.values().length == 3;
+    }
+    // Lithium end
+
     private static final double EPSILON = 1.0E-7D;
     public final double minX;
     public final double minY;
@@ -81,11 +90,35 @@ public class AABB {
     }
 
     public double min(Direction.Axis axis) {
-        return axis.choose(this.minX, this.minY, this.minZ);
+        //return axis.choose(this.minX, this.minY, this.minZ); // Lithium - math.fast_util
+        // Lithium start - math.fast_util
+        switch (axis.ordinal()) {
+            case 0: //X
+                return this.minX;
+            case 1: //Y
+                return this.minY;
+            case 2: //Z
+                return this.minZ;
+        }
+
+        throw new IllegalArgumentException();
+        // Lithium end
     }
 
     public double max(Direction.Axis axis) {
-        return axis.choose(this.maxX, this.maxY, this.maxZ);
+        //return axis.choose(this.maxX, this.maxY, this.maxZ); // Lithium - math.fast_util
+        // Lithium start - math.fast_util
+        switch (axis.ordinal()) {
+            case 0: //X
+                return this.maxX;
+            case 1: //Y
+                return this.maxY;
+            case 2: //Z
+                return this.maxZ;
+        }
+
+        throw new IllegalArgumentException();
+        // Lithium end
     }
 
     @Override
