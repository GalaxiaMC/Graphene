From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 2No2Name <2No2Name@web.de>
Date: Thu, 13 Jan 2022 00:47:37 -0500
Subject: [PATCH] lithium: ai.nearby_entity_tracking and
 ai.nearby_entity_tracking.goals

Original code by CaffeineMC, licensed under GNU Lesser General Public License v3.0
You can find the original code on https://github.com/CaffeineMC/lithium-fabric (Yarn mappings)

diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 758078b9ce19a5a6fa485a759afcd32e3533f6ce..d4db146a732041d218f7ac582febb97e74e20754 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -150,9 +150,30 @@ import org.bukkit.event.entity.EntityPoseChangeEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.plugin.PluginManager;
 // CraftBukkit end
+// JettPack start
+import me.jellysquid.mods.lithium.common.entity.tracker.nearby.NearbyEntityListener;
+import me.jellysquid.mods.lithium.common.entity.tracker.nearby.NearbyEntityListenerMulti;
+// JettPack end
 
 public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     protected static javax.script.ScriptEngine scriptEngine = new javax.script.ScriptEngineManager().getEngineByName("rhino"); // Purpur
+
+    // JettPack start - lithium: ai.nearby_entity_tracking
+    private NearbyEntityListenerMulti nearbyTracker = null;
+
+    @Nullable
+    public NearbyEntityListenerMulti getListener() {
+        return this.nearbyTracker;
+    }
+
+    public void addListener(NearbyEntityListener listener) {
+        if (this.nearbyTracker == null) {
+            this.nearbyTracker = new NearbyEntityListenerMulti();
+        }
+        this.nearbyTracker.addListener(listener);
+    }
+    // JettPack end
+
     // CraftBukkit start
     private static final int CURRENT_LEVEL = 2;
     public boolean preserveMotion = true; // Paper - keep initial motion on first setPositionRotation
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java
index ebf19357d7e3a5e4d02ac685fa70d118a8e40eb4..a2ad44bfe3a371a663e41c084f40e9a71f278f1c 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/AvoidEntityGoal.java
@@ -11,6 +11,12 @@ import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import net.minecraft.world.entity.ai.util.DefaultRandomPos;
 import net.minecraft.world.level.pathfinder.Path;
 import net.minecraft.world.phys.Vec3;
+// JettPack start
+import me.jellysquid.mods.lithium.common.entity.tracker.nearby.NearbyEntityTracker;
+import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.util.Mth;
+import net.minecraft.core.Vec3i;
+// JettPack end
 
 public class AvoidEntityGoal<T extends LivingEntity> extends Goal {
     protected final PathfinderMob mob;
@@ -26,6 +32,7 @@ public class AvoidEntityGoal<T extends LivingEntity> extends Goal {
     protected final Predicate<LivingEntity> avoidPredicate;
     protected final Predicate<LivingEntity> predicateOnAvoidEntity;
     private final TargetingConditions avoidEntityTargeting;
+    private NearbyEntityTracker<T> nearbyTracker; // JettPack
 
     public AvoidEntityGoal(PathfinderMob mob, Class<T> fleeFromType, float distance, double slowSpeed, double fastSpeed) {
         this(mob, fleeFromType, (livingEntity) -> {
@@ -44,6 +51,13 @@ public class AvoidEntityGoal<T extends LivingEntity> extends Goal {
         this.pathNav = mob.getNavigation();
         this.setFlags(EnumSet.of(Goal.Flag.MOVE));
         this.avoidEntityTargeting = TargetingConditions.forCombat().range((double)distance).selector(inclusionSelector.and(extraInclusionSelector));
+        // JettPack start - lithium: ai.nearby_entity_tracking.goals
+        EntityDimensions dimensions = this.mob.getType().getDimensions();
+        double adjustedRange = dimensions.width * 0.5D + this.maxDist + 2D;
+        int horizontalRange = Mth.ceil(adjustedRange);
+        this.nearbyTracker = new NearbyEntityTracker<>(fleeFromType, mob, new Vec3i(horizontalRange, Mth.ceil(dimensions.height + 3 + 2), horizontalRange));
+        mob.addListener(this.nearbyTracker);
+        // JettPack end
     }
 
     public AvoidEntityGoal(PathfinderMob fleeingEntity, Class<T> classToFleeFrom, float fleeDistance, double fleeSlowSpeed, double fleeFastSpeed, Predicate<LivingEntity> inclusionSelector) {
@@ -54,9 +68,7 @@ public class AvoidEntityGoal<T extends LivingEntity> extends Goal {
 
     @Override
     public boolean canUse() {
-        this.toAvoid = this.mob.level.getNearestEntity(this.mob.level.getEntitiesOfClass(this.avoidClass, this.mob.getBoundingBox().inflate((double)this.maxDist, 3.0D, (double)this.maxDist), (livingEntity) -> {
-            return true;
-        }), this.avoidEntityTargeting, this.mob, this.mob.getX(), this.mob.getY(), this.mob.getZ());
+        this.toAvoid = this.nearbyTracker.getClosestEntity(this.mob.getBoundingBox().inflate(this.maxDist, 3.0D, this.maxDist), this.avoidEntityTargeting, this.mob.getX(), this.mob.getY(), this.mob.getZ()); // JettPack - lithium: ai.nearby_entity_tracking.goals
         if (this.toAvoid == null) {
             return false;
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/LookAtPlayerGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/LookAtPlayerGoal.java
index bae3db488371909c82946d6da294cda4e5a19cb5..76a9b7d823c563946e84a3e9c70ababe4476b5f4 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/LookAtPlayerGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/LookAtPlayerGoal.java
@@ -8,6 +8,12 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
 import net.minecraft.world.entity.player.Player;
+// JettPack start
+import me.jellysquid.mods.lithium.common.entity.tracker.nearby.NearbyEntityTracker;
+import net.minecraft.core.Vec3i;
+import net.minecraft.util.Mth;
+import net.minecraft.world.entity.EntityDimensions;
+// JettPack end
 
 public class LookAtPlayerGoal extends Goal {
     public static final float DEFAULT_PROBABILITY = 0.02F;
@@ -20,6 +26,7 @@ public class LookAtPlayerGoal extends Goal {
     private final boolean onlyHorizontal;
     protected final Class<? extends LivingEntity> lookAtType;
     protected final TargetingConditions lookAtContext;
+    private NearbyEntityTracker<? extends LivingEntity> nearbyTracker; // JettPack
 
     public LookAtPlayerGoal(Mob mob, Class<? extends LivingEntity> targetType, float range) {
         this(mob, targetType, range, 0.02F);
@@ -43,6 +50,14 @@ public class LookAtPlayerGoal extends Goal {
         } else {
             this.lookAtContext = TargetingConditions.forNonCombat().range((double)range);
         }
+        // JettPack start - lithium: ai.nearby_entity_tracking.goals
+        EntityDimensions dimensions = this.mob.getType().getDimensions();
+        double adjustedRange = dimensions.width * 0.5D + this.lookDistance + 2D;
+        int horizontalRange = Mth.ceil(adjustedRange);
+        this.nearbyTracker = new NearbyEntityTracker<>(targetType, mob, new Vec3i(horizontalRange, Mth.ceil(dimensions.height + 3 + 2), horizontalRange));
+
+        mob.addListener(this.nearbyTracker);
+        // JettPack end
 
     }
 
@@ -56,11 +71,9 @@ public class LookAtPlayerGoal extends Goal {
             }
 
             if (this.lookAtType == Player.class) {
-                this.lookAt = this.mob.level.getNearestPlayer(this.lookAtContext, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
+                this.lookAt = this.nearbyTracker.getClosestEntity(null, this.lookAtContext, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ()); // JettPack - lithium: ai.nearby_entity_tracking.goals
             } else {
-                this.lookAt = this.mob.level.getNearestEntity(this.mob.level.getEntitiesOfClass(this.lookAtType, this.mob.getBoundingBox().inflate((double)this.lookDistance, 3.0D, (double)this.lookDistance), (livingEntity) -> {
-                    return true;
-                }), this.lookAtContext, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
+                this.lookAt = this.nearbyTracker.getClosestEntity(this.mob.getBoundingBox().inflate(this.lookDistance, 3.0D, this.lookDistance), this.lookAtContext, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ()); // JettPack - lithium: ai.nearby_entity_tracking.goals
             }
 
             return this.lookAt != null;
diff --git a/src/main/java/net/minecraft/world/level/entity/EntitySection.java b/src/main/java/net/minecraft/world/level/entity/EntitySection.java
index 9b39920baea28fe85a0bb6ada0e00a466b3ddf31..ee744cf4d5a794565decb46a7b1c7147f447270e 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntitySection.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntitySection.java
@@ -12,6 +12,13 @@ import com.ishland.vmp.common.general.collections.ITypeFilterableList; // Mirai
 import it.unimi.dsi.fastutil.objects.ObjectArrayList; // Mirai
 import net.minecraft.world.level.entity.EntityAccess; // Mirai
 import net.minecraft.world.level.entity.EntityTypeTest; // Mirai
+// JettPack start
+import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
+import me.jellysquid.mods.lithium.common.entity.tracker.EntityTrackerEngine;
+import me.jellysquid.mods.lithium.common.entity.tracker.nearby.NearbyEntityListener;
+import me.jellysquid.mods.lithium.common.entity.tracker.nearby.SectionedEntityMovementTracker;
+import net.minecraft.world.entity.Entity;
+// JettPack end
 
 public class EntitySection<T extends EntityAccess> {
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -22,6 +29,70 @@ public class EntitySection<T extends EntityAccess> {
     public int inventoryEntityCount;
     // Paper end
 
+    // JettPack start - lithium: ai.nearby_entity_tracking
+    private final ReferenceOpenHashSet<NearbyEntityListener> nearbyEntityListeners = new ReferenceOpenHashSet<>(0);
+    private final ReferenceOpenHashSet<SectionedEntityMovementTracker<?, ?>> sectionVisibilityListeners = new ReferenceOpenHashSet<>(0);
+    private final long[] lastEntityMovementByType = new long[EntityTrackerEngine.NUM_MOVEMENT_NOTIFYING_CLASSES];
+    private long pos;
+
+    public void addListener(NearbyEntityListener listener) {
+        this.nearbyEntityListeners.add(listener);
+        if (this.chunkStatus.isAccessible()) {
+            listener.onSectionEnteredRange(this, this.storage);
+        }
+    }
+
+    public void removeListener(EntitySectionStorage<?> sectionedEntityCache, NearbyEntityListener listener) {
+        boolean removed = this.nearbyEntityListeners.remove(listener);
+        if (this.chunkStatus.isAccessible() && removed) {
+            listener.onSectionLeftRange(this, this.storage);
+        }
+        if (this.isEmpty()) {
+            sectionedEntityCache.remove(this.pos);
+        }
+    }
+
+    public void addListener(SectionedEntityMovementTracker<?, ?> listener) {
+        this.sectionVisibilityListeners.add(listener);
+        if (this.chunkStatus.isAccessible()) {
+            listener.onSectionEnteredRange(this);
+        }
+    }
+
+    public void removeListener(EntitySectionStorage<?> sectionedEntityCache, SectionedEntityMovementTracker<?, ?> listener) {
+        boolean removed = this.sectionVisibilityListeners.remove(listener);
+        if (this.chunkStatus.isAccessible() && removed) {
+            listener.onSectionLeftRange(this);
+        }
+        if (this.isEmpty()) {
+            sectionedEntityCache.remove(this.pos);
+        }
+    }
+
+    public void updateMovementTimestamps(int notificationMask, long time) {
+        long[] lastEntityMovementByType = this.lastEntityMovementByType;
+        int size = lastEntityMovementByType.length;
+        int mask;
+        for (int i = Integer.numberOfTrailingZeros(notificationMask); i < size; ) {
+            lastEntityMovementByType[i] = time;
+            mask = 0xffff_fffe << i;
+            i = Integer.numberOfTrailingZeros(notificationMask & mask);
+        }
+    }
+
+    public long[] getMovementTimestampArray() {
+        return this.lastEntityMovementByType;
+    }
+
+    public void setPos(long chunkSectionPos) {
+        this.pos = chunkSectionPos;
+    }
+
+    public long getPos() {
+        return this.pos;
+    }
+    // JettPack end
+
     public EntitySection(Class<T> entityClass, Visibility status) {
         this.chunkStatus = status;
         this.storage = new ClassInstanceMultiMap<>(entityClass);
@@ -36,6 +107,16 @@ public class EntitySection<T extends EntityAccess> {
         }
         // Paper end
         this.storage.add(entity);
+        // JettPack start - lithium: ai.nearby_entity_tracking
+        if (!this.chunkStatus.isAccessible() || this.nearbyEntityListeners.isEmpty()) {
+            return;
+        }
+        if (entity instanceof Entity entity1) {
+            for (NearbyEntityListener nearbyEntityListener : this.nearbyEntityListeners) {
+                nearbyEntityListener.onEntityEnteredRange(entity1);
+            }
+        }
+        // JettPack end
     }
 
     public boolean remove(T entity) {
@@ -46,6 +127,13 @@ public class EntitySection<T extends EntityAccess> {
             this.inventoryEntityCount--;
         }
         // Paper end
+        // JettPack start - lithium: ai.nearby_entity_tracking
+        if (this.chunkStatus.isAccessible() && !this.nearbyEntityListeners.isEmpty() && entity instanceof Entity entity1) {
+            for (NearbyEntityListener nearbyEntityListener : this.nearbyEntityListeners) {
+                nearbyEntityListener.onEntityLeftRange(entity1);
+            }
+        }
+        // JettPack end
         return this.storage.remove(entity);
     }
 
@@ -107,6 +195,7 @@ public class EntitySection<T extends EntityAccess> {
     // Mirai end
 
     public boolean isEmpty() {
+        if (!this.nearbyEntityListeners.isEmpty() || !this.sectionVisibilityListeners.isEmpty()) return false; // JettPack
         return this.storage.isEmpty();
     }
 
@@ -119,6 +208,33 @@ public class EntitySection<T extends EntityAccess> {
     }
 
     public Visibility updateChunkStatus(Visibility status) {
+        // JettPack start - lithium: ai.nearby_entity_tracking
+        if (this.chunkStatus.isAccessible() != status.isAccessible()) {
+            if (!status.isAccessible()) {
+                if (!this.nearbyEntityListeners.isEmpty()) {
+                    for (NearbyEntityListener nearbyEntityListener : this.nearbyEntityListeners) {
+                        nearbyEntityListener.onSectionLeftRange(this, this.storage);
+                    }
+                }
+                if (!this.sectionVisibilityListeners.isEmpty()) {
+                    for (SectionedEntityMovementTracker<?, ?> listener : this.sectionVisibilityListeners) {
+                        listener.onSectionLeftRange(this);
+                    }
+                }
+            } else {
+                if (!this.nearbyEntityListeners.isEmpty()) {
+                    for (NearbyEntityListener nearbyEntityListener : this.nearbyEntityListeners) {
+                        nearbyEntityListener.onSectionEnteredRange(this, this.storage);
+                    }
+                }
+                if (!this.sectionVisibilityListeners.isEmpty()) {
+                    for (SectionedEntityMovementTracker<?, ?> listener : this.sectionVisibilityListeners) {
+                        listener.onSectionEnteredRange(this);
+                    }
+                }
+            }
+        }
+        // JettPack end
         Visibility visibility = this.chunkStatus;
         this.chunkStatus = status;
         return visibility;
diff --git a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
index ca091eb3bcd6f51b51c5931cd8b1ec02ec2ecd98..ece5f35846dcd3edf6348735a9c876d760289e7b 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
@@ -20,6 +20,10 @@ import net.minecraft.core.SectionPos;
 import net.minecraft.util.VisibleForDebug;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.phys.AABB;
+// JettPack start
+import it.unimi.dsi.fastutil.objects.Object2ReferenceOpenHashMap;
+import me.jellysquid.mods.lithium.common.entity.tracker.nearby.SectionedEntityMovementTracker;
+// JettPack end
 
 public class EntitySectionStorage<T extends EntityAccess> {
     private final Class<T> entityClass;
@@ -93,6 +97,20 @@ public class EntitySectionStorage<T extends EntityAccess> {
     }
     // JettPack end
 
+    // JettPack start - lithium: ai.nearby_entity_tracking
+    private final Object2ReferenceOpenHashMap<SectionedEntityMovementTracker<?, ?>, SectionedEntityMovementTracker<?, ?>> sectionEntityMovementTrackers = new Object2ReferenceOpenHashMap<>();
+
+    public void remove(SectionedEntityMovementTracker<?, ?> tracker) {
+        this.sectionEntityMovementTrackers.remove(tracker);
+    }
+
+    public <S extends SectionedEntityMovementTracker<?, ?>> S deduplicate(S tracker) {
+        //noinspection unchecked
+        S storedTracker = (S) this.sectionEntityMovementTrackers.putIfAbsent(tracker, tracker);
+        return storedTracker == null ? tracker : storedTracker;
+    }
+    // JettPack end
+
     public LongStream getExistingSectionPositionsInChunk(long chunkPos) {
         int i = ChunkPos.getX(chunkPos);
         int j = ChunkPos.getZ(chunkPos);
@@ -120,7 +138,11 @@ public class EntitySectionStorage<T extends EntityAccess> {
     }
 
     public EntitySection<T> getOrCreateSection(long sectionPos) {
-        return this.sections.computeIfAbsent(sectionPos, this::createSection);
+        // JettPack start - lithium: ai.nearby_entity_tracking
+        EntitySection<T> section = this.sections.computeIfAbsent(sectionPos, this::createSection);
+        section.setPos(sectionPos);
+        return section;
+        // JettPack end
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
index 649df137ac36a62e53b42b7675c606e9e57795b2..20e9f1e2910091a5b0ef025ccd5341fa71cb57ea 100644
--- a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -35,6 +35,10 @@ import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.storage.EntityStorage;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 // CraftBukkit end
+// JettPack start
+import me.jellysquid.mods.lithium.common.entity.tracker.EntityTrackerEngine;
+import me.jellysquid.mods.lithium.common.entity.tracker.nearby.NearbyEntityListenerMulti;
+// JettPack end
 
 public class PersistentEntitySectionManager<T extends EntityAccess> implements AutoCloseable {
 
@@ -61,6 +65,12 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
         this.entityGetter = new LevelEntityGetterAdapter<>(this.visibleEntityStorage, this.sectionStorage);
     }
 
+    // JettPack start - lithium: ai.nearby_entity_tracking
+    public EntitySectionStorage<T> getCache() {
+        return this.sectionStorage;
+    }
+    // JettPack end
+
     // CraftBukkit start - add method to get all entities in chunk
     public List<Entity> getEntities(ChunkPos chunkCoordIntPair) {
         return this.sectionStorage.getExistingSectionsInChunk(chunkCoordIntPair.toLong()).flatMap(EntitySection::getEntities).map(entity -> (Entity) entity).collect(Collectors.toList());
@@ -177,6 +187,16 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
             entitysection.add(entity);
             this.entitySliceManager.addEntity((Entity)entity); // Paper
             entity.setLevelCallback(new PersistentEntitySectionManager.Callback(entity, i, entitysection));
+            // JettPack start - lithium: ai.nearby_entity_tracking
+            NearbyEntityListenerMulti listener = ((Entity)entity).getListener();
+            if (listener != null) {
+                listener.forEachChunkInRangeChange(
+                        this.sectionStorage,
+                        null,
+                        SectionPos.of(entity.blockPosition())
+                );
+            }
+            // JettPack end
             if (!existing) {
                 this.callbacks.onCreated(entity);
             }
@@ -519,12 +539,25 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
         private final T entity;
         private long currentSectionKey;
         private EntitySection<T> currentSection;
+        private int notificationMask; // JettPack
 
         Callback(EntityAccess entityaccess, long i, EntitySection entitysection) {
             this.entity = (T) entityaccess; // CraftBukkit - decompile error
             this.currentSectionKey = i;
             this.currentSection = entitysection;
+            // JettPack start - lithium: ai.nearby_entity_tracking
+            this.notificationMask = EntityTrackerEngine.getNotificationMask(this.entity.getClass());
+            this.notifyMovementListeners();
+            // JettPack end
+        }
+
+        // JettPack start - lithium: ai.nearby_entity_tracking
+        private void notifyMovementListeners() {
+            if (this.notificationMask != 0) {
+                this.currentSection.updateMovementTimestamps(this.notificationMask, ((Entity) this.entity).getCommandSenderWorld().getGameTime());
+            }
         }
+        // JettPack end
 
         @Override
         public void onMove() {
@@ -566,7 +599,20 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
                 }
                 // Paper end
                 this.updateStatus(visibility, entitysection.getStatus());
+                // JettPack start - lithium: ai.nearby_entity_tracking
+                NearbyEntityListenerMulti listener = ((Entity)this.entity).getListener();
+                if (listener != null)
+                {
+                    listener.forEachChunkInRangeChange(
+                            PersistentEntitySectionManager.this.entitySliceManager.world.entityManager.getCache(),
+                            SectionPos.of(this.currentSectionKey),
+                            SectionPos.of(newSectionPos)
+                    );
+                }
+                this.notifyMovementListeners();
+                // JettPack end
             }
+            this.notifyMovementListeners(); // JettPack
 
         }
 
@@ -599,6 +645,18 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
         @Override
         public void onRemove(Entity.RemovalReason reason) {
             org.spigotmc.AsyncCatcher.catchOp("Entity remove"); // Paper
+            // JettPack start - lithium: ai.nearby_entity_tracking
+            NearbyEntityListenerMulti listener = ((Entity)this.entity).getListener();
+            if (listener != null) {
+                //noinspection unchecked
+                listener.forEachChunkInRangeChange(
+                        PersistentEntitySectionManager.this.entitySliceManager.world.entityManager.getCache(),
+                        SectionPos.of(this.currentSectionKey),
+                        null
+                );
+            }
+            this.notifyMovementListeners();
+            // JettPack end
             if (!this.currentSection.remove(this.entity)) {
                 PersistentEntitySectionManager.LOGGER.warn("Entity {} wasn't found in section {} (destroying due to {})", new Object[]{this.entity, SectionPos.of(this.currentSectionKey), reason});
             }
