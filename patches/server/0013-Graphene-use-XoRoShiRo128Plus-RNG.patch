From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: satvrn <pastawho@gmail.com>
Date: Tue, 26 Sep 2023 02:48:30 -0700
Subject: [PATCH] Graphene: use XoRoShiRo128Plus RNG


diff --git a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
index 5408cbc21fc7577a6100b5a1ca0463e899d2df8b..5c81297872a7c092cf39861888968c100db6ebc6 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
@@ -11,12 +11,13 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.Random;
 import java.util.UUID;
 
+import org.apache.commons.rng.source32.XoRoShiRo128Plus; // Graphene
+
 public class PaperLootableInventoryData {
 
-    private static final Random RANDOM = new Random();
+    private static final XoRoShiRo128Plus RANDOM = new XoRoShiRo128Plus(); // Graphene
 
     private long lastFill = -1;
     private long nextRefill = -1;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 9c4cec7cf323f6768a89358fa1a11b53ce335cd4..1ccda978e0cce32ec22a1d574d44b32c28ec7fbe 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -166,7 +166,6 @@ import org.slf4j.Logger;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.serialization.DynamicOps;
 import com.mojang.serialization.Lifecycle;
-import java.util.Random;
 // import jline.console.ConsoleReader; // Paper
 import joptsimple.OptionSet;
 import net.minecraft.core.HolderLookup;
@@ -190,6 +189,8 @@ import org.bukkit.event.server.ServerLoadEvent;
 
 import co.aikar.timings.MinecraftTimings; // Paper
 
+import org.apache.commons.rng.source32.XoRoShiRo128Plus; // Graphene
+
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements ServerInfo, CommandSource, AutoCloseable {
 
     private static MinecraftServer SERVER; // Paper
@@ -675,7 +676,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             ChunkPos chunkcoordintpair = new ChunkPos(chunkproviderserver.randomState().sampler().findSpawnPosition());
             // CraftBukkit start
             if (world.generator != null) {
-                Random rand = new Random(world.getSeed());
+                XoRoShiRo128Plus rand = new XoRoShiRo128Plus(world.getSeed()); // Graphene
                 org.bukkit.Location spawn = world.generator.getFixedSpawnLocation(world.getWorld(), rand);
 
                 if (spawn != null) {
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index f0bbc48e2df1da42e4bf9f7113451738b986fbbf..cddb852d3ea039a8e551cb6b2cb31971fb98478f 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -44,13 +44,15 @@ import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
 import org.bukkit.event.player.PlayerPreLoginEvent;
 // CraftBukkit end
 
+import org.apache.commons.rng.source32.XoRoShiRo128Plus; // Graphene
+
 public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener, TickablePacketListener {
 
     private static final AtomicInteger UNIQUE_THREAD_ID = new AtomicInteger(0);
     static final Logger LOGGER = LogUtils.getLogger();
     private static final int MAX_TICKS_BEFORE_LOGIN = 600;
     private static final Component DISCONNECT_UNEXPECTED_QUERY = Component.translatable("multiplayer.disconnect.unexpected_query_response");
-    private static final RandomSource RANDOM = new org.bukkit.craftbukkit.util.RandomSourceWrapper(new java.util.Random()); // Paper - This is called across threads, make safe
+    private static final RandomSource RANDOM = new org.bukkit.craftbukkit.util.RandomSourceWrapper(new XoRoShiRo128Plus()); // Paper - This is called across threads, make safe // Graphene
     private final byte[] challenge;
     final MinecraftServer server;
     public final Connection connection;
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 84643f0dd71530a5f18557f299d7725a8f53666e..f98cf2ce53b6fac6f6ea4147505958fd93aaad7e 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -154,6 +154,8 @@ import org.bukkit.event.player.PlayerTeleportEvent;
 import org.bukkit.plugin.PluginManager;
 // CraftBukkit end
 
+import org.apache.commons.rng.source32.XoRoShiRo128Plus; // Graphene
+
 public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public static javax.script.ScriptEngine scriptEngine = new javax.script.ScriptEngineManager().getEngineByName("rhino"); // Purpur
     // CraftBukkit start
@@ -165,7 +167,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
     // Paper start
     public static RandomSource SHARED_RANDOM = new RandomRandomSource();
-    private static final class RandomRandomSource extends java.util.Random implements net.minecraft.world.level.levelgen.BitRandomSource {
+    private static final class RandomRandomSource extends XoRoShiRo128Plus implements net.minecraft.world.level.levelgen.BitRandomSource { // Graphene
         private boolean locked = false;
 
         @Override
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 8d385708df97d47881929d4352f1b90286aad1a2..c30459072db1eb82c8f56cf35f3535170101e055 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -52,6 +52,8 @@ import net.minecraft.world.ticks.LevelChunkTicks;
 import net.minecraft.world.ticks.TickContainerAccess;
 import org.slf4j.Logger;
 
+import org.apache.commons.rng.source32.XoRoShiRo128Plus; // Graphene
+
 public class LevelChunk extends ChunkAccess {
 
     static final Logger LOGGER = LogUtils.getLogger();
@@ -792,7 +794,7 @@ public class LevelChunk extends ChunkAccess {
             if (this.needsDecoration) {
                 //try (co.aikar.timings.Timing ignored = this.level.timings.chunkLoadPopulate.startTiming()) { // Paper // Purpur
                 this.needsDecoration = false;
-                java.util.Random random = new java.util.Random();
+                XoRoShiRo128Plus random = new XoRoShiRo128Plus(); // Graphene
                 random.setSeed(this.level.getSeed());
                 long xRand = random.nextLong() / 2L * 2L + 1L;
                 long zRand = random.nextLong() / 2L * 2L + 1L;
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
index 9248769e6d357f6eec68945fd7700e79b2942c41..2aff556fe52c589822959fdc4ca1c716ac8a7887 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
@@ -26,8 +26,12 @@ import net.minecraft.nbt.NbtIo; // Paper
 import net.minecraft.world.level.ChunkPos;
 import org.slf4j.Logger;
 
+import org.apache.commons.rng.source32.XoRoShiRo128Plus; // Graphene
+
 public class RegionFile implements AutoCloseable {
 
+    private static final XoRoShiRo128Plus RANDOM = new XoRoShiRo128Plus(); // Graphene
+
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final int SECTOR_BYTES = 4096;
     @VisibleForTesting
@@ -108,7 +112,7 @@ public class RegionFile implements AutoCloseable {
     }
 
     private void backupRegionFile() {
-        Path backup = this.regionFile.getParent().resolve(this.regionFile.getFileName() + "." + new java.util.Random().nextLong() + ".backup");
+        Path backup = this.regionFile.getParent().resolve(this.regionFile.getFileName() + "." + RANDOM.nextLong() + ".backup"); // Graphene
         this.backupRegionFile(backup);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 52b48e40c3ee5f483c6cb04409459cf25abc3f0d..b2bf044e574cb4fb72eeeefd4cdf60955c0e7255 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -17,7 +17,6 @@ import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
-import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.ExecutionException;
@@ -138,6 +137,8 @@ import org.bukkit.util.StructureSearchResult;
 import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 
+import org.apache.commons.rng.source32.XoRoShiRo128Plus; // Graphene
+
 public class CraftWorld extends CraftRegionAccessor implements World {
     public static final int CUSTOM_DIMENSION_OFFSET = 10;
     private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
@@ -228,7 +229,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
     // Paper end
 
-    private static final Random rand = new Random();
+    private static final XoRoShiRo128Plus rand = new XoRoShiRo128Plus(); // Graphene
 
     public CraftWorld(ServerLevel world, ChunkGenerator gen, BiomeProvider biomeProvider, Environment env) {
         this.world = world;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
index 68c5af9b67a2834ee6e2f80ceefa19c3a982b8ed..5f2a63615e27a7797bd41f5a5596e78ce162e9ea 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
-import java.util.Random;
 import net.minecraft.world.entity.projectile.FireworkRocketEntity;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
@@ -12,9 +11,11 @@ import org.bukkit.entity.Firework;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.inventory.meta.FireworkMeta;
 
+import org.apache.commons.rng.source32.XoRoShiRo128Plus; // Graphene
+
 public class CraftFirework extends CraftProjectile implements Firework {
 
-    private final Random random = new Random();
+    private final XoRoShiRo128Plus random = new XoRoShiRo128Plus(); // Graphene
     //private CraftItemStack item; // Paper - Remove usage, not accurate representation of current item.
 
     public CraftFirework(CraftServer server, FireworkRocketEntity entity) {
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
index d46ccc3b3aaacf937631a44a7e0f91b793a83c86..6112652b5ce2e20faad4a13587e582bd2a8afcb7 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit.generator;
 import com.google.common.base.Preconditions;
 import com.mojang.serialization.Codec;
 import java.util.List;
-import java.util.Random;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import net.minecraft.core.BlockPos;
@@ -43,12 +42,14 @@ import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.generator.ChunkGenerator.BiomeGrid;
 import org.bukkit.generator.ChunkGenerator.ChunkData;
 
+import org.apache.commons.rng.source32.XoRoShiRo128Plus; // Graphene
+
 public class CustomChunkGenerator extends InternalChunkGenerator {
 
     private final net.minecraft.world.level.chunk.ChunkGenerator delegate;
     private final ChunkGenerator generator;
     private final ServerLevel world;
-    private final Random random = new Random();
+    private final XoRoShiRo128Plus random = new XoRoShiRo128Plus(); // Graphene
     private boolean newApi;
     private boolean implementBaseHeight = true;
 
diff --git a/src/test/java/org/bukkit/PerRegistryTest.java b/src/test/java/org/bukkit/PerRegistryTest.java
index 9e553a8858750c494456f04abd7bffd1d257308c..fd844688967d315d7d96a82b75e5a43cc1e2c7ea 100644
--- a/src/test/java/org/bukkit/PerRegistryTest.java
+++ b/src/test/java/org/bukkit/PerRegistryTest.java
@@ -4,7 +4,6 @@ import static org.junit.jupiter.api.Assertions.*;
 import com.google.common.collect.Lists;
 import java.lang.reflect.Field;
 import java.util.List;
-import java.util.Random;
 import java.util.stream.Stream;
 import org.bukkit.craftbukkit.CraftRegistry;
 import org.bukkit.support.AbstractTestingBase;
@@ -13,13 +12,15 @@ import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.Arguments;
 import org.junit.jupiter.params.provider.MethodSource;
 
+import org.apache.commons.rng.source32.XoRoShiRo128Plus; // Graphene
+
 public class PerRegistryTest extends AbstractTestingBase {
 
-    private static Random random;
+    private static XoRoShiRo128Plus random; // Graphene
 
     @BeforeAll
     public static void init() {
-        PerRegistryTest.random = new Random();
+        PerRegistryTest.random = new XoRoShiRo128Plus(); // Graphene
     }
 
     public static Stream<Arguments> data() {
